{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\n\nfunction Decks() {\n  _s();\n\n  const [Decks, setDecks] = useState(null);\n  const {\n    deckId\n  } = useParams();\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    async function loadCard() {\n      try {\n        const response = await fetch(`http://localhost:5000/decks/${deckId}`, {\n          signal: abortController.signal\n        });\n        const deck = await response.json();\n        setDecks(deck);\n      } catch (error) {\n        if (error.name !== \"AbortError\") {\n          console.log(error);\n        }\n      }\n    }\n\n    loadCard();\n    return () => {\n      abortController.abort(); // cancels any pending request or response\n    };\n  }, [deckId]);\n}\n\n_s(Decks, \"wgkoE3/FDyo1a5ntXKth45kq18w=\", false, function () {\n  return [useParams];\n});\n\n_c = Decks;\nexport default Decks;\n\nvar _c;\n\n$RefreshReg$(_c, \"Decks\");","map":{"version":3,"sources":["C:/Users/rosej/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/components/Decks.js"],"names":["React","useEffect","useState","useParams","Decks","setDecks","deckId","abortController","AbortController","loadCard","response","fetch","signal","deck","json","error","name","console","log","abort"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,cAA1B;;AAEA,SAASC,KAAT,GAAiB;AAAA;;AACf,QAAM,CAACA,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAaH,SAAS,EAA5B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMM,eAAe,GAAG,IAAIC,eAAJ,EAAxB;;AAEA,mBAAeC,QAAf,GAA0B;AACxB,UAAI;AACF,cAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,+BAA8BL,MAAO,EAAvC,EAA0C;AACpEM,UAAAA,MAAM,EAAEL,eAAe,CAACK;AAD4C,SAA1C,CAA5B;AAGA,cAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAnB;AACAT,QAAAA,QAAQ,CAACQ,IAAD,CAAR;AACD,OAND,CAME,OAAOE,KAAP,EAAc;AACd,YAAIA,KAAK,CAACC,IAAN,KAAe,YAAnB,EAAiC;AAC/BC,UAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACD;AACF;AACF;;AAEDN,IAAAA,QAAQ;AAER,WAAO,MAAM;AACXF,MAAAA,eAAe,CAACY,KAAhB,GADW,CACc;AAC1B,KAFD;AAGD,GAtBQ,EAsBN,CAACb,MAAD,CAtBM,CAAT;AAuBD;;GA3BQF,K;UAEYD,S;;;KAFZC,K;AA6BT,eAAeA,KAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router\";\r\n\r\nfunction Decks() {\r\n  const [Decks, setDecks] = useState(null);\r\n  const { deckId } = useParams();\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n\r\n    async function loadCard() {\r\n      try {\r\n        const response = await fetch(`http://localhost:5000/decks/${deckId}`, {\r\n          signal: abortController.signal,\r\n        });\r\n        const deck = await response.json();\r\n        setDecks(deck);\r\n      } catch (error) {\r\n        if (error.name !== \"AbortError\") {\r\n          console.log(error);\r\n        }\r\n      }\r\n    }\r\n\r\n    loadCard();\r\n\r\n    return () => {\r\n      abortController.abort(); // cancels any pending request or response\r\n    };\r\n  }, [deckId]);\r\n}\r\n\r\nexport default Decks;\r\n"]},"metadata":{},"sourceType":"module"}